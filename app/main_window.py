# –§–∞–π–ª: app/main_window.py
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∞—Å—Å ImageEditorWindow, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

import sys
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –∫ –∏–∫–æ–Ω–∫–∞–º
from PySide6.QtWidgets import (
    QMainWindow, QLabel, QFileDialog, QScrollArea,
    QMessageBox, QSizePolicy, QInputDialog, QToolBar,
    QDockWidget, QListWidget, QListWidgetItem, QVBoxLayout,
    QWidget, QPushButton, QHBoxLayout
)
from PySide6.QtGui import QPixmap, QImage, QAction, QGuiApplication, QIcon, QKeySequence
from PySide6.QtWidgets import QStyle
from PySide6.QtCore import Qt, Slot, QDir, QSize
from PIL import Image, ImageQt, UnidentifiedImageError
from PySide6.QtWidgets import QColorDialog, QSlider
from app.drawing_canvas import DrawingCanvas
from . import image_operations
from app.gradient_utils import create_linear_gradient
from PySide6.QtWidgets import QDialog, QColorDialog, QComboBox

from .layer_manager import LayerManager, Layer
from .history_manager import HistoryManager


class ImageEditorWindow(QMainWindow):
    def __init__(self, resources_path):  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º
        super().__init__()
        self.resources_path = resources_path
        self.icons_path = os.path.join(self.resources_path, "icons")

        self.setWindowTitle("–§–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä Pro v2")

        screen = QGuiApplication.primaryScreen()
        screen_geometry = screen.availableGeometry()
        self.setGeometry(screen_geometry.width() // 8, screen_geometry.height() // 8,
                         screen_geometry.width() * 3 // 4, screen_geometry.height() * 3 // 4)

        self.layer_manager = LayerManager()
        self.history_manager = HistoryManager()

        # –°–≤—è–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
        self.layer_manager.active_layer_changed.connect(self.on_active_layer_changed)

        self.current_pixmap_for_zoom = None
        self.current_zoom_factor = 1.0

        self.image_label = QLabel("–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Ctrl+O –∏–ª–∏ Ctrl+N)")
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Ignored)

        # --- –†–∏—Å–æ–≤–∞–Ω–∏–µ ---
        self.drawing_canvas = None
        self.is_drawing_active = False
        self.init_drawing_tools()


        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setWidget(self.image_label)

        self.setCentralWidget(self.scroll_area)

        self._create_actions()
        self._create_menus()
        self._create_toolbar()
        self._create_layer_panel()  # –ü–∞–Ω–µ–ª—å —Å–ª–æ–µ–≤

        self.statusBar().showMessage("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
        self._update_actions_enabled_state()


    def _get_icon(self, name):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É –∏–∑ –ø–∞–ø–∫–∏ resources/icons."""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ Qt, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ, –ª—É—á—à–µ –∏–º–µ—Ç—å —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        standard_icon = None
        if name == "open.png":
            standard_icon = None
        elif name == "save.png":
            standard_icon = None
        elif name == "undo.png":
            standard_icon = None
        elif name == "redo.png":
            standard_icon = None
        elif name == "add_layer.png":
            standard_icon = None  # –ü—Ä–∏–º–µ—Ä
        elif name == "reset.png":
            standard_icon = None
        elif name == "rotate.png":
            standard_icon = None

        icon_path = os.path.join(self.icons_path, name)
        if os.path.exists(icon_path):
            return QIcon(icon_path)
        elif standard_icon:
            return self.style().standardIcon(standard_icon)
        return QIcon()  # –ü—É—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    def init_drawing_tools(self):
        self.brush_action = QAction(QIcon(os.path.join(self.icons_path, "brush.png")), "–ö–∏—Å—Ç—å", self)
        self.brush_action.setCheckable(True)
        self.brush_action.triggered.connect(self.activate_brush_mode)

        self.eraser_action = QAction(QIcon(os.path.join(self.icons_path, "eraser.png")), "–õ–∞—Å—Ç–∏–∫", self)
        self.eraser_action.setCheckable(True)
        self.eraser_action.triggered.connect(self.activate_eraser_mode)

        self.color_action = QAction("–¶–≤–µ—Ç", self)
        self.color_action.triggered.connect(self.select_brush_color)

        self.brush_size_slider = QSlider(Qt.Horizontal)
        self.brush_size_slider.setMinimum(1)
        self.brush_size_slider.setMaximum(50)
        self.brush_size_slider.setValue(5)
        self.brush_size_slider.setFixedWidth(100)
        self.brush_size_slider.valueChanged.connect(self.change_brush_size)

        self.apply_drawing_action = QAction("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", self)
        self.apply_drawing_action.triggered.connect(self.apply_drawing_to_layer)

        self.clear_drawing_action = QAction("üóë –û—á–∏—Å—Ç–∏—Ç—å", self)
        self.clear_drawing_action.triggered.connect(self.clear_drawing_layer)

        self.gradient_action = QAction("–ì—Ä–∞–¥–∏–µ–Ω—Ç", self)
        self.gradient_action.triggered.connect(self.apply_gradient_to_layer)

        self.rect_action = QAction("‚¨õ –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫", self)
        self.rect_action.setCheckable(True)
        self.rect_action.triggered.connect(lambda: self.activate_shape_mode("rect"))

        self.ellipse_action = QAction("üü† –û–≤–∞–ª", self)
        self.ellipse_action.setCheckable(True)
        self.ellipse_action.triggered.connect(lambda: self.activate_shape_mode("ellipse"))

        self.line_action = QAction("üìè –õ–∏–Ω–∏—è", self)
        self.line_action.setCheckable(True)
        self.line_action.triggered.connect(lambda: self.activate_shape_mode("line"))

    def activate_brush_mode(self):
        self.start_drawing(eraser=False)
        self.eraser_action.setChecked(False)

    def activate_eraser_mode(self):
        self.start_drawing(eraser=True)
        self.brush_action.setChecked(False)

    def start_drawing(self, eraser=False):
        if not self.drawing_canvas:
            image_size = self.image_label.size()
            self.drawing_canvas = DrawingCanvas(self.image_label, image_size.width(), image_size.height())
            self.drawing_canvas.move(0, 0)
            self.drawing_canvas.show()
        self.drawing_canvas.set_eraser_mode(eraser)
        self.drawing_canvas.set_pen_color(self.drawing_canvas.pen_color)
        self.drawing_canvas.set_pen_width(self.brush_size_slider.value())
        self.is_drawing_active = True

    def select_brush_color(self):
        color = QColorDialog.getColor()
        if color.isValid() and self.drawing_canvas:
            self.drawing_canvas.set_pen_color(color)

    def change_brush_size(self, value):
        if self.drawing_canvas:
            self.drawing_canvas.set_pen_width(value)

    def clear_drawing_layer(self):
        if self.drawing_canvas:
            self.drawing_canvas.clear_canvas()

    def apply_drawing_to_layer(self):
        if not self.drawing_canvas or not self.layer_manager.get_active_layer():
            return
        active_layer = self.layer_manager.get_active_layer()
        drawing_qimage = self.drawing_canvas.get_image()
        drawing_pil = ImageQt.fromqimage(drawing_qimage).convert("RGBA")

        self.history_manager.add_state(active_layer.id, active_layer.image.copy())
        base_pil = active_layer.image.convert("RGBA")
        base_pil.alpha_composite(drawing_pil)
        active_layer.image = base_pil

        self.drawing_canvas.clear_canvas()
        self.update_composite_image_display()
        self.statusBar().showMessage("–†–∏—Å—É–Ω–æ–∫ –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å–ª–æ—é.")

    def _create_actions(self):
        # –§–∞–π–ª
        self.new_action = QAction(self._get_icon("new_file.png"), "&–ù–æ–≤—ã–π...", self)  # –ù—É–∂–Ω–∞ –∏–∫–æ–Ω–∫–∞ new_file.png
        self.new_action.triggered.connect(self.create_new_image_dialog)
        self.new_action.setShortcut(QKeySequence.New)

        self.open_action = QAction(self._get_icon("open.png"), "&–û—Ç–∫—Ä—ã—Ç—å...", self)
        self.open_action.triggered.connect(self.open_image_dialog)
        self.open_action.setShortcut(QKeySequence.Open)

        self.save_as_action = QAction(self._get_icon("save.png"), "&–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...", self)
        self.save_as_action.triggered.connect(self.save_image_dialog)
        self.save_as_action.setShortcut(QKeySequence.SaveAs)

        self.exit_action = QAction("&–í—ã—Ö–æ–¥", self)
        self.exit_action.triggered.connect(self.close)
        self.exit_action.setShortcut(QKeySequence.Quit)

        # –ü—Ä–∞–≤–∫–∞
        self.undo_action = QAction(self._get_icon("undo.png"), "&–û—Ç–º–µ–Ω–∏—Ç—å", self)
        self.undo_action.triggered.connect(self.trigger_undo)
        self.undo_action.setShortcut(QKeySequence.Undo)

        self.redo_action = QAction(self._get_icon("redo.png"), "&–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", self)
        self.redo_action.triggered.connect(self.trigger_redo)
        self.redo_action.setShortcut(QKeySequence.Redo)

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–§–∏–ª—å—Ç—Ä—ã)
        self.grayscale_action = QAction(self._get_icon("filter_grayscale.png"), "&–û—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ", self)
        self.grayscale_action.triggered.connect(
            lambda: self._apply_filter_to_active_layer(image_operations.apply_grayscale, filter_name="–û—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ"))

        self.sepia_action = QAction(self._get_icon("filter_sepia.png"), "&–°–µ–ø–∏—è", self)
        self.sepia_action.triggered.connect(
            lambda: self._apply_filter_to_active_layer(image_operations.apply_sepia, filter_name="–°–µ–ø–∏—è"))

        self.brightness_action = QAction(self._get_icon("filter_brightness.png"), "&–Ø—Ä–∫–æ—Å—Ç—å...", self)
        self.brightness_action.triggered.connect(self.adjust_brightness_on_active_layer)

        self.contrast_action = QAction(self._get_icon("filter_contrast.png"), "&–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å...", self)
        self.contrast_action.triggered.connect(self.adjust_contrast_on_active_layer)

        self.rotate_action = QAction(self._get_icon("rotate.png"), "–ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ 90¬∞ &–≤–ø—Ä–∞–≤–æ", self)
        self.rotate_action.triggered.connect(
            lambda: self._apply_filter_to_active_layer(image_operations.rotate_90_clockwise,
                                                       filter_name="–ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞"))

        self.blur_action = QAction(self._get_icon("filter_blur.png"), "&–†–∞–∑–º—ã—Ç–∏–µ (–ì–∞—É—Å—Å)...", self)
        self.blur_action.triggered.connect(self.apply_blur_to_active_layer)

        self.sharpen_action = QAction(self._get_icon("filter_sharpen.png"), "&–†–µ–∑–∫–æ—Å—Ç—å...", self)
        self.sharpen_action.triggered.connect(
            lambda: self._apply_filter_to_active_layer(image_operations.apply_sharpen, filter_name="–†–µ–∑–∫–æ—Å—Ç—å"))

        self.emboss_action = QAction(self._get_icon("filter_emboss.png"), "&–¢–∏—Å–Ω–µ–Ω–∏–µ", self)
        self.emboss_action.triggered.connect(
            lambda: self._apply_filter_to_active_layer(image_operations.apply_emboss, filter_name="–¢–∏—Å–Ω–µ–Ω–∏–µ"))

        self.edge_detect_action = QAction(self._get_icon("filter_edges.png"), "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ &–∫—Ä–∞–µ–≤", self)
        self.edge_detect_action.triggered.connect(
            lambda: self._apply_filter_to_active_layer(image_operations.apply_edge_detect,
                                                       filter_name="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∞–µ–≤"))

        self.reset_layer_action = QAction(self._get_icon("reset.png"), "&–°–±—Ä–æ—Å–∏—Ç—å —Å–ª–æ–π", self)  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
        self.reset_layer_action.triggered.connect(self.reset_active_layer_to_original)
        # self.reset_layer_action.setShortcut("Ctrl+R") # –ú–æ–∂–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å Redo –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

        # –°–ª–æ–∏
        self.add_layer_action = QAction(self._get_icon("add_layer.png"), "&–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–π", self)
        self.add_layer_action.triggered.connect(self.add_new_layer_action)
        # self.delete_layer_action = QAction("–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–π", self) - –≤ –±—É–¥—É—â–µ–º

        # –í–∏–¥
        self.zoom_in_action = QAction(self.style().standardIcon(QStyle.StandardPixmap.SP_ArrowUp), "–£–≤–µ–ª–∏—á–∏—Ç—å (+)", self)
        self.zoom_in_action.triggered.connect(lambda: self.zoom_image_on_display(1.25))
        self.zoom_in_action.setShortcut(QKeySequence.ZoomIn)

        self.zoom_out_action = QAction(self.style().standardIcon(QStyle.StandardPixmap.SP_ArrowDown), "–£–º–µ–Ω—å—à–∏—Ç—å (-)",
                                       self)
        self.zoom_out_action.triggered.connect(lambda: self.zoom_image_on_display(0.8))
        self.zoom_out_action.setShortcut(QKeySequence.ZoomOut)

        self.actual_size_action = QAction("–†–µ–∞–ª—å–Ω—ã–π &—Ä–∞–∑–º–µ—Ä (100%)", self)
        self.actual_size_action.triggered.connect(self.set_actual_image_size)
        self.actual_size_action.setShortcut("Ctrl+0")

    def _create_menus(self):
        file_menu = self.menuBar().addMenu("&–§–∞–π–ª")
        file_menu.addAction(self.new_action)
        file_menu.addAction(self.open_action)
        file_menu.addAction(self.save_as_action)
        file_menu.addSeparator()
        file_menu.addAction(self.exit_action)

        edit_menu = self.menuBar().addMenu("&–ü—Ä–∞–≤–∫–∞")
        edit_menu.addAction(self.undo_action)
        edit_menu.addAction(self.redo_action)
        edit_menu.addSeparator()
        edit_menu.addAction(self.reset_layer_action)  # –°–±—Ä–æ—Å —Å–ª–æ—è

        image_menu = self.menuBar().addMenu("&–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        image_menu.addAction(self.grayscale_action)
        image_menu.addAction(self.sepia_action)
        image_menu.addAction(self.blur_action)
        image_menu.addAction(self.sharpen_action)
        image_menu.addAction(self.emboss_action)
        image_menu.addAction(self.edge_detect_action)
        image_menu.addSeparator()
        image_menu.addAction(self.brightness_action)
        image_menu.addAction(self.contrast_action)
        image_menu.addSeparator()
        image_menu.addAction(self.rotate_action)

        layer_menu = self.menuBar().addMenu("&–°–ª–æ–∏")
        layer_menu.addAction(self.add_layer_action)
        # layer_menu.addAction(self.delete_layer_action)

        view_menu = self.menuBar().addMenu("&–í–∏–¥")
        view_menu.addAction(self.zoom_in_action)
        view_menu.addAction(self.zoom_out_action)
        view_menu.addAction(self.actual_size_action)

    def _create_toolbar(self):
        toolbar = QToolBar("–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        toolbar.setMovable(True)
        toolbar.setIconSize(QSize(24, 24))  # –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–æ–∫
        self.addToolBar(Qt.TopToolBarArea, toolbar)

        toolbar.addAction(self.new_action)
        toolbar.addAction(self.open_action)
        toolbar.addAction(self.save_as_action)
        toolbar.addSeparator()
        toolbar.addAction(self.undo_action)
        toolbar.addAction(self.redo_action)
        toolbar.addSeparator()
        toolbar.addAction(self.add_layer_action)
        toolbar.addSeparator()
        # –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        toolbar.addAction(self.grayscale_action)
        toolbar.addAction(self.blur_action)
        toolbar.addAction(self.rotate_action)
        toolbar.addSeparator()
        toolbar.addAction(self.brush_action)
        toolbar.addAction(self.eraser_action)
        toolbar.addAction(self.color_action)
        toolbar.addAction(self.apply_drawing_action)
        toolbar.addAction(self.clear_drawing_action)
        toolbar.addWidget(self.brush_size_slider)
        toolbar.addSeparator()
        toolbar.addAction(self.gradient_action)
        toolbar.addSeparator()
        toolbar.addAction(self.rect_action)
        toolbar.addAction(self.ellipse_action)
        toolbar.addAction(self.line_action)

    def _create_layer_panel(self):
        self.layer_dock_widget = QDockWidget("–°–ª–æ–∏", self)
        self.layer_dock_widget.setAllowedAreas(Qt.LeftDockWidgetArea | Qt.RightDockWidgetArea)

        layer_panel_widget = QWidget()
        layer_layout = QVBoxLayout()

        self.layer_list_widget = QListWidget()
        self.layer_list_widget.setAlternatingRowColors(True)
        self.layer_list_widget.currentItemChanged.connect(self.on_layer_selection_changed)
        layer_layout.addWidget(self.layer_list_widget)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è–º–∏
        layer_buttons_layout = QHBoxLayout()
        add_btn = QPushButton(self._get_icon("add_layer.png"), "–î–æ–±–∞–≤–∏—Ç—å")
        add_btn.clicked.connect(self.add_new_layer_action)
        # delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å") # –î–ª—è –±—É–¥—É—â–µ–≥–æ
        # delete_btn.clicked.connect(self.delete_selected_layer_action)
        layer_buttons_layout.addWidget(add_btn)
        # layer_buttons_layout.addWidget(delete_btn)
        layer_layout.addLayout(layer_buttons_layout)

        layer_panel_widget.setLayout(layer_layout)
        self.layer_dock_widget.setWidget(layer_panel_widget)
        self.addDockWidget(Qt.RightDockWidgetArea, self.layer_dock_widget)

    def activate_shape_mode(self, mode):
        self.start_drawing()
        if self.drawing_canvas:
            self.drawing_canvas.set_mode(mode)

        # –°–±—Ä–æ—Å —á–µ–∫–æ–≤ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        for action in [self.brush_action, self.eraser_action,
                       self.rect_action, self.ellipse_action, self.line_action]:
            if action != self.sender():
                action.setChecked(False)

    def apply_gradient_to_layer(self):
        active_layer = self.layer_manager.get_active_layer()
        if not active_layer or not active_layer.image:
            QMessageBox.warning(self, "–ù–µ—Ç —Å–ª–æ—è", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞.")
            return

        # –í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤
        start_color = QColorDialog.getColor(Qt.white, self, "–ù–∞—á–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç")
        if not start_color.isValid():
            return
        end_color = QColorDialog.getColor(Qt.black, self, "–ö–æ–Ω–µ—á–Ω—ã–π —Ü–≤–µ—Ç")
        if not end_color.isValid():
            return

        # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_box = QComboBox()
        direction_box.addItems(["–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π", "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π"])
        direction_box.setCurrentIndex(0)

        direction_dialog = QDialog(self)
        direction_dialog.setWindowTitle("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞")
        layout = QVBoxLayout()
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞:"))
        layout.addWidget(direction_box)

        buttons = QHBoxLayout()
        ok_btn = QPushButton("OK")
        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        ok_btn.clicked.connect(direction_dialog.accept)
        cancel_btn.clicked.connect(direction_dialog.reject)
        buttons.addWidget(ok_btn)
        buttons.addWidget(cancel_btn)
        layout.addLayout(buttons)

        direction_dialog.setLayout(layout)
        if direction_dialog.exec() != QDialog.Accepted:
            return

        direction = 'horizontal' if direction_box.currentText() == "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π" else 'vertical'

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        width, height = active_layer.image.size
        start = (start_color.red(), start_color.green(), start_color.blue(), start_color.alpha())
        end = (end_color.red(), end_color.green(), end_color.blue(), end_color.alpha())
        gradient_img = create_linear_gradient(width, height, start, end, direction)

        self.history_manager.add_state(active_layer.id, active_layer.image.copy())
        active_layer.image = gradient_img
        self.update_composite_image_display()
        self.statusBar().showMessage("–ì—Ä–∞–¥–∏–µ–Ω—Ç –ø—Ä–∏–º–µ–Ω—ë–Ω.")

    def _update_actions_enabled_state(self):
        has_layers = self.layer_manager.has_layers()
        active_layer = self.layer_manager.get_active_layer()
        has_active_layer_with_image = active_layer is not None and active_layer.image is not None

        self.save_as_action.setEnabled(has_layers)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é

        # –§–∏–ª—å—Ç—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self.grayscale_action.setEnabled(has_active_layer_with_image)
        self.sepia_action.setEnabled(has_active_layer_with_image)
        self.brightness_action.setEnabled(has_active_layer_with_image)
        self.contrast_action.setEnabled(has_active_layer_with_image)
        self.rotate_action.setEnabled(has_active_layer_with_image)
        self.blur_action.setEnabled(has_active_layer_with_image)
        self.sharpen_action.setEnabled(has_active_layer_with_image)
        self.emboss_action.setEnabled(has_active_layer_with_image)
        self.edge_detect_action.setEnabled(has_active_layer_with_image)

        self.reset_layer_action.setEnabled(has_active_layer_with_image and active_layer.original_image is not None)

        # Undo/Redo –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è HistoryManager –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è
        can_undo, can_redo = False, False
        if active_layer:
            can_undo = self.history_manager.can_undo(active_layer.id)
            can_redo = self.history_manager.can_redo(active_layer.id)
        self.undo_action.setEnabled(can_undo)
        self.redo_action.setEnabled(can_redo)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        has_pixmap = self.current_pixmap_for_zoom is not None
        self.zoom_in_action.setEnabled(has_pixmap)
        self.zoom_out_action.setEnabled(has_pixmap)
        self.actual_size_action.setEnabled(has_pixmap)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ª–æ–π)
        # self.add_layer_action.setEnabled(True) # –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–π

    @Slot()
    def create_new_image_dialog(self):
        width, okW = QInputDialog.getInt(self, "–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–®–∏—Ä–∏–Ω–∞ (px):", 640, 1, 10000)
        if not okW: return
        height, okH = QInputDialog.getInt(self, "–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–í—ã—Å–æ—Ç–∞ (px):", 480, 1, 10000)
        if not okH: return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        new_pil_image = Image.new("RGBA", (width, height), (255, 255, 255, 0))

        if not self.layer_manager.has_layers():  # –ï—Å–ª–∏ —Å–ª–æ–µ–≤ –Ω–µ—Ç, —ç—Ç–æ –ø–µ—Ä–≤—ã–π
            self.layer_manager.add_layer(image=new_pil_image, name="–§–æ–Ω")
        else:  # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π —Å–ª–æ–π —Å–≤–µ—Ä—Ö—É
            self.layer_manager.add_layer(image=new_pil_image)

        self.refresh_layer_list()
        self.update_composite_image_display()
        self.statusBar().showMessage(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {width}x{height}")
        self._update_actions_enabled_state()

    @Slot()
    def open_image_dialog(self):
        start_path = QDir.homePath()
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–û—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", start_path,
            "–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (*.png *.jpg *.jpeg *.bmp *.gif);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        if file_path:
            try:
                pil_img = Image.open(file_path).convert("RGBA")

                # –ï—Å–ª–∏ —Å–ª–æ–µ–≤ –Ω–µ—Ç, —ç—Ç–æ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä–≤—ã–º. –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –Ω–æ–≤—ã–π.
                if not self.layer_manager.has_layers() or not self.layer_manager.get_active_layer():
                    self.layer_manager.clear_all_layers()  # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –±—ã–ª–æ
                    self.history_manager.clear_all_history()
                    layer_name = os.path.basename(file_path)
                    self.layer_manager.add_layer(image=pil_img, name=layer_name, is_original=True)
                else:
                    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π —Å–ª–æ–π –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π? –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤—ã–π.
                    layer_name = "–°–ª–æ–π " + os.path.basename(file_path)
                    self.layer_manager.add_layer(image=pil_img, name=layer_name, is_original=True)

                self.refresh_layer_list()
                self.update_composite_image_display()
                self.statusBar().showMessage(f"–û—Ç–∫—Ä—ã—Ç–æ: {file_path}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏: {e}")
            finally:
                self._update_actions_enabled_state()

    @Slot()
    def save_image_dialog(self):
        if not self.layer_manager.has_layers():
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        composite_image = self.layer_manager.get_composite_image()
        if not composite_image:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        file_path, selected_filter = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫...", QDir.homePath(),
            "PNG —Ñ–∞–π–ª (*.png);;JPEG —Ñ–∞–π–ª (*.jpg *.jpeg);;BMP —Ñ–∞–π–ª (*.bmp);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )

        if file_path:
            try:
                image_operations.save_image(composite_image, file_path)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ image_operations
                self.statusBar().showMessage(f"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {file_path}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

    def update_composite_image_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ QLabel –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å–ª–æ–µ–≤."""
        active_layer = self.layer_manager.get_active_layer()
        if not self.layer_manager.has_layers() and not active_layer:
            self.image_label.clear()
            self.image_label.setText("–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            self.current_pixmap_for_zoom = None
            self._update_actions_enabled_state()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç LayerManager
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è –∏–ª–∏ —Å–ª–æ–µ–≤, LayerManager –≤–µ—Ä–Ω–µ—Ç None –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π, –Ω–æ –æ–Ω –ø—É—Å—Ç–æ–π, –æ—Ç–æ–±—Ä–∞–∑–∏–º –µ–≥–æ (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
        # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ —Å–ª–æ–µ–≤ –Ω–µ—Ç, –æ—Ç–æ–±—Ä–∞–∑–∏–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π)

        composite_image_pil = self.layer_manager.get_composite_image()

        if composite_image_pil:
            try:
                q_image = ImageQt.ImageQt(composite_image_pil)
                pixmap = QPixmap.fromImage(q_image)

                self.image_label.setPixmap(pixmap)
                self.image_label.adjustSize()
                self.current_pixmap_for_zoom = pixmap
                self.current_zoom_factor = 1.0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑—É–º –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é: {e}")
                self.image_label.setText("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
                self.current_pixmap_for_zoom = None
        else:  # –ï—Å–ª–∏ composite_image_pil is None (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ —Å–ª–æ–∏ –Ω–µ–≤–∏–¥–∏–º—ã –∏–ª–∏ –Ω–µ—Ç —Å–ª–æ–µ–≤)
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π)
            active_layer = self.layer_manager.get_active_layer()
            if active_layer and active_layer.image:
                try:
                    q_image = ImageQt.ImageQt(active_layer.image)
                    pixmap = QPixmap.fromImage(q_image)
                    self.image_label.setPixmap(pixmap)
                    self.image_label.adjustSize()
                    self.current_pixmap_for_zoom = pixmap
                    self.current_zoom_factor = 1.0
                except Exception as e:
                    self.image_label.setText(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è: {e}")
                    self.current_pixmap_for_zoom = None
            else:  # –°–æ–≤—Å–µ–º –Ω–µ—á–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å
                self.image_label.clear()
                self.image_label.setText("–ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö —Å–ª–æ–µ–≤ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                self.current_pixmap_for_zoom = None

        self._update_actions_enabled_state()

    def _apply_filter_to_active_layer(self, filter_function, *args, filter_name="—Ñ–∏–ª—å—Ç—Ä"):
        active_layer = self.layer_manager.get_active_layer()
        if active_layer and active_layer.image:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è Undo
                self.history_manager.add_state(active_layer.id, active_layer.image.copy())

                processed_image = filter_function(active_layer.image.copy(), *args)  # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–æ–ø–∏–∏
                if processed_image:
                    active_layer.image = processed_image  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ—è
                    self.update_composite_image_display()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
                    self.statusBar().showMessage(f"–ü—Ä–∏–º–µ–Ω–µ–Ω '{filter_name}' –∫ —Å–ª–æ—é '{active_layer.name}'")
                else:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞", f"–§—É–Ω–∫—Ü–∏—è '{filter_name}' –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                    self.history_manager.undo(active_layer.id)
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å '{filter_name}': {e}")
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.history_manager.undo(active_layer.id)
        else:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞.")
        self._update_actions_enabled_state()

    # --- –°–ª–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
    @Slot()
    def adjust_brightness_on_active_layer(self):
        active_layer = self.layer_manager.get_active_layer()
        if not (active_layer and active_layer.image):
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            return
        factor, ok = QInputDialog.getDouble(self, "–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:", 1.0, 0.1, 5.0, 2)
        if ok: self._apply_filter_to_active_layer(image_operations.adjust_brightness, factor, filter_name="–Ø—Ä–∫–æ—Å—Ç—å")

    @Slot()
    def adjust_contrast_on_active_layer(self):
        active_layer = self.layer_manager.get_active_layer()
        if not (active_layer and active_layer.image):
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            return
        factor, ok = QInputDialog.getDouble(self, "–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:", 1.0, 0.1, 5.0, 2)
        if ok: self._apply_filter_to_active_layer(image_operations.adjust_contrast, factor, filter_name="–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å")

    @Slot()
    def apply_blur_to_active_layer(self):
        active_layer = self.layer_manager.get_active_layer()
        if not (active_layer and active_layer.image):
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            return
        radius, ok = QInputDialog.getDouble(self, "–†–∞–∑–º—ã—Ç–∏–µ –ø–æ –ì–∞—É—Å—Å—É", "–†–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è:", 2.0, 0.1, 20.0, 1)
        if ok: self._apply_filter_to_active_layer(image_operations.apply_gaussian_blur, radius, filter_name="–†–∞–∑–º—ã—Ç–∏–µ")

    @Slot()
    def reset_active_layer_to_original(self):
        active_layer = self.layer_manager.get_active_layer()
        if active_layer and active_layer.original_image:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è Undo –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            self.history_manager.add_state(active_layer.id, active_layer.image.copy())

            active_layer.image = active_layer.original_image.copy()
            self.history_manager.clear_history_for_layer(active_layer.id)  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—è –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
            # –î–æ–±–∞–≤–ª—è–µ–º "original_image" –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –æ—á–∏—â–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            self.history_manager.add_state(active_layer.id, active_layer.image.copy(), is_initial_state=True)

            self.update_composite_image_display()
            self.statusBar().showMessage(f"–°–ª–æ–π '{active_layer.name}' —Å–±—Ä–æ—à–µ–Ω –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É.")
        elif active_layer:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                    f"–î–ª—è —Å–ª–æ—è '{active_layer.name}' –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        else:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è –¥–ª—è —Å–±—Ä–æ—Å–∞.")
        self._update_actions_enabled_state()

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è–º–∏ ---
    def refresh_layer_list(self):
        self.layer_list_widget.clear()
        for i, layer in enumerate(reversed(self.layer_manager.layers)):  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            item_text = f"{layer.name} {'(V)' if layer.visible else '(H)'}"  # V - visible, H - hidden
            list_item = QListWidgetItem(item_text, self.layer_list_widget)
            list_item.setData(Qt.UserRole, layer.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–ª–æ—è –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞
            if layer == self.layer_manager.get_active_layer():
                self.layer_list_widget.setCurrentItem(list_item)
        self._update_actions_enabled_state()

    @Slot()
    def on_layer_selection_changed(self, current_item, previous_item):
        if current_item:
            layer_id = current_item.data(Qt.UserRole)
            self.layer_manager.set_active_layer_by_id(layer_id)
            # self.update_composite_image_display() # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π –∏–ª–∏ —Ä–∞–º–∫—É
            self.statusBar().showMessage(f"–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ–π: {self.layer_manager.get_active_layer().name}")
        self._update_actions_enabled_state()

    @Slot()
    def on_active_layer_changed(self, layer_id):
        """–°–ª–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ—è –≤ LayerManager."""
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ Undo/Redo, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ—è
        self._update_actions_enabled_state()
        # –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ QListWidget, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ –∏–∑ –Ω–µ–≥–æ
        for i in range(self.layer_list_widget.count()):
            item = self.layer_list_widget.item(i)
            if item.data(Qt.UserRole) == layer_id:
                if self.layer_list_widget.currentItem() != item:  # –ò–∑–±–µ–≥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏
                    self.layer_list_widget.setCurrentItem(item)
                break

    @Slot()
    def add_new_layer_action(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ—è. –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–ª–æ–∏, –±–µ—Ä–µ–º –∏—Ö —Ä–∞–∑–º–µ—Ä.
        # –ò–Ω–∞—á–µ, –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–ª–∏ –¥–∏–∞–ª–æ–≥.
        width, height = 640, 480  # –î–µ—Ñ–æ–ª—Ç
        if self.layer_manager.has_layers():
            ref_layer = self.layer_manager.layers[0]  # –ë–µ—Ä–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ—è –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å
            if ref_layer.image:
                width, height = ref_layer.image.size

        new_layer_image = Image.new("RGBA", (width, height), (0, 0, 0, 0))  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.layer_manager.add_layer(image=new_layer_image, is_original=True)  # is_original –¥–ª—è —Å–±—Ä–æ—Å–∞
        self.refresh_layer_list()
        self.update_composite_image_display()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ–ª—Å—Ç
        self.statusBar().showMessage("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–ª–æ–π.")
        self._update_actions_enabled_state()

    # --- –ò—Å—Ç–æ—Ä–∏—è (Undo/Redo) ---
    @Slot()
    def trigger_undo(self):
        active_layer = self.layer_manager.get_active_layer()
        if active_layer:
            undone_image = self.history_manager.undo(active_layer.id)
            if undone_image:
                active_layer.image = undone_image
                self.update_composite_image_display()
                self.statusBar().showMessage(f"–û—Ç–º–µ–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–æ—è '{active_layer.name}'")
            else:
                self.statusBar().showMessage(f"–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞ —Å–ª–æ–µ '{active_layer.name}'")
        self._update_actions_enabled_state()

    @Slot()
    def trigger_redo(self):
        active_layer = self.layer_manager.get_active_layer()
        if active_layer:
            redone_image = self.history_manager.redo(active_layer.id)
            if redone_image:
                active_layer.image = redone_image
                self.update_composite_image_display()
                self.statusBar().showMessage(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–æ—è '{active_layer.name}'")
            else:
                self.statusBar().showMessage(f"–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞ —Å–ª–æ–µ '{active_layer.name}'")
        self._update_actions_enabled_state()

    # --- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    @Slot()
    def zoom_image_on_display(self, factor):
        if self.current_pixmap_for_zoom:  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ —Ö–æ–ª—Å—Ç–µ (–∫–æ–º–ø–æ–∑–∏—Ü–∏—é)
            self.current_zoom_factor *= factor
            self.current_zoom_factor = max(0.05, min(self.current_zoom_factor, 20.0))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π current_pixmap_for_zoom, –∞ –Ω–µ —É–∂–µ —Å–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–º –∑—É–º–µ
            original_composite_pixmap = ImageQt.ImageQt(self.layer_manager.get_composite_image())
            original_composite_pixmap = QPixmap.fromImage(original_composite_pixmap)

            new_width = int(original_composite_pixmap.width() * self.current_zoom_factor)
            new_height = int(original_composite_pixmap.height() * self.current_zoom_factor)

            if new_width > 0 and new_height > 0:
                scaled_pixmap = original_composite_pixmap.scaled(
                    new_width, new_height, Qt.KeepAspectRatio, Qt.SmoothTransformation
                )
                self.image_label.setPixmap(scaled_pixmap)
                # self.image_label.adjustSize() # –ù–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ scroll_area.widgetResizable = True –∏ label.sizePolicy = Ignored
            self.statusBar().showMessage(f"–ú–∞—Å—à—Ç–∞–±: {self.current_zoom_factor:.2f}x")

    @Slot()
    def set_actual_image_size(self):
        if self.current_pixmap_for_zoom:  # current_pixmap_for_zoom —ç—Ç–æ —É–∂–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è
            composite_pil_image = self.layer_manager.get_composite_image()
            if composite_pil_image:
                q_image = ImageQt.ImageQt(composite_pil_image)
                pixmap = QPixmap.fromImage(q_image)
                self.image_label.setPixmap(pixmap)
                # self.image_label.adjustSize()
                self.current_zoom_factor = 1.0
                self.statusBar().showMessage("–ú–∞—Å—à—Ç–∞–±: 1.00x (–†–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)")

    def closeEvent(self, event):
        # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞',
                                     "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()